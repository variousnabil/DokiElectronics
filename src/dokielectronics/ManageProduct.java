/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dokielectronics;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class ManageProduct extends javax.swing.JFrame {

    DefaultTableModel model = new DefaultTableModel(new String[]{"Product ID", "Product Name", "Price", "Stock", "Category ID"}, 0);
    String ImgPath = null; 
    ResultSet rs;
    PreparedStatement ps;
    Statement st;
    
    public ManageProduct() {
//        UpdateTable();
        ShowProductInJTable();
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtProductID = new javax.swing.JTextField();
        txtCategoryID = new javax.swing.JTextField();
        txtProductName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        lblImage = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        lblAddImage = new javax.swing.JLabel();
        lblAdd = new javax.swing.JLabel();
        lblUpdate = new javax.swing.JLabel();
        lblDelete = new javax.swing.JLabel();
        lblBack = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Product");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtProductID.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtProductID, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, 150, 30));

        txtCategoryID.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(txtCategoryID, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 150, 30));

        txtProductName.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(txtProductName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 150, 30));

        txtPrice.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(txtPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, 150, 30));

        txtStock.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(txtStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 150, 30));

        tblProducts.setModel(model);
        tblProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProducts);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 60, 500, 490));

        lblImage.setBackground(new java.awt.Color(52, 152, 219));
        lblImage.setOpaque(true);
        getContentPane().add(lblImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 220, 160));

        txtDesc.setColumns(20);
        txtDesc.setRows(5);
        txtDesc.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane2.setViewportView(txtDesc);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 190, 80));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Category \n1 = Handphone\n2 = Laptop \n3 = Accesories");
        jScrollPane3.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 66, 180, 100));

        lblAddImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddImageMouseClicked(evt);
            }
        });
        getContentPane().add(lblAddImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 330, 130, 50));

        lblAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddMouseClicked(evt);
            }
        });
        getContentPane().add(lblAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 520, 100, 40));

        lblUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblUpdateMouseClicked(evt);
            }
        });
        getContentPane().add(lblUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 520, 110, 40));

        lblDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDeleteMouseClicked(evt);
            }
        });
        getContentPane().add(lblDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 520, 120, 40));

        lblBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBackMouseClicked(evt);
            }
        });
        getContentPane().add(lblBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 520, 130, 40));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/managepro_doki.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //    public void UpdateTable(){
//        try {
//            //connecting java with database
//            Class.forName("com.mysql.jdbc.Driver");            
//            Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1/doki_electronics", "root", "");
//            //query table
//            String sql = "SELECT * FROM Products";
//            ps = con.prepareStatement(sql);
//            rs = ps.executeQuery();
//
//            while(rs.next()){
//                String id = rs.getString("ProductID");
//                String name = rs.getString("ProductName");
//                String price = "Rp. " + rs.getString("UnitPrice");
//                String stock = rs.getString("Stock");
//                String category = rs.getString("CategoryID");
//                model.addRow(new Object[]{id,name,price,stock,category});
//            }
//        } catch (ClassNotFoundException ex) {
//            System.out.println("Driver tidak ditemukan");
//        } catch (SQLException e) {
//            System.out.println("Syntax error\n" + e.getMessage());
//        } 
//    }
    
    
    // Display Data in JTable :
    // 1 - Fill Array list with the data 
    public ArrayList<Product> getProductList(){
        
        ArrayList<Product> productList = new ArrayList<Product>();
        try {  
            //connecting java with database
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1/doki_electronics", "root", "");
            String query = "SELECT * FROM Products";
          
            st = con.createStatement();
            rs = st.executeQuery(query);
            Product product;
            
            while(rs.next()){
                product = new Product(rs.getInt("ProductID"),rs.getString("ProductName"),rs.getString("Description"), rs.getDouble("UnitPrice"),rs.getInt("Stock"),rs.getBytes("Picture"),rs.getInt("CategoryID"));
                productList.add(product); 
            }
        }
        catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
        return productList;
    } 
    
    // 2 - Populate the JTable
    public void ShowProductInJTable(){
        ArrayList<Product> list = getProductList();
        
        Object[] row = new Object[5];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getPid();
            row[1] = list.get(i).getPname();
            row[2] = "Rp. " + list.get(i).getPprice();
            row[3] = list.get(i).getPstock();
            row[4] = list.get(i).getPcatid();
            
            model.addRow(row);
        }
    }
    
    //show data in input
    public void ShowItem(int index){
        txtProductID.setText(String.valueOf(getProductList().get(index).getPid()));
        txtProductName.setText(getProductList().get(index).getPname());
        txtDesc.append(getProductList().get(index).getPdesc());
        txtPrice.setText(String.valueOf(getProductList().get(index).getPprice()));
        txtStock.setText(String.valueOf(getProductList().get(index).getPstock()));
        lblImage.setIcon(ResizeImage(null, getProductList().get(index).getPimg()));
        txtCategoryID.setText(String.valueOf(getProductList().get(index).getPcatid()));
    }
    
    
    //Check Input Fields Method
    public boolean checkInputs(){
        if(txtProductName.getText() != null 
           && txtPrice.getText() != null
           && txtProductName.getText() != null
           && txtCategoryID.getText() != null
           && txtStock.getText() != null){
            return true;
        } else {
            return false;
        }
    }
    
    //Resize Image
    public ImageIcon ResizeImage(String imagePath, byte[] pic){
        
        ImageIcon myImage = null;
        
        if(imagePath != null){
            myImage = new ImageIcon(imagePath);
        } else{
            myImage = new ImageIcon(pic); 
        }
        
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
        
    }
    
    private void tblProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductsMouseClicked
        int index = tblProducts.getSelectedRow();
        ShowItem(index);
        
    }//GEN-LAST:event_tblProductsMouseClicked

    private void txtProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductIDActionPerformed

    private void lblAddImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddImageMouseClicked
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            //determine the path
            String path = selectedFile.getAbsolutePath();
            lblImage.setIcon(ResizeImage(path, null));
            ImgPath = path;
        } else{
            System.out.println("no file selected");  
        }
    }//GEN-LAST:event_lblAddImageMouseClicked

    private void lblAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddMouseClicked
        if(checkInputs() && ImgPath != null){
            try {            
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1/doki_electronics", "root", "");
                
                PreparedStatement ps = con.prepareStatement("INSERT INTO Products(ProductID,ProductName,Description,UnitPrice,Stock,Picture,CategoryID) VALUES(?,?,?,?,?,?,?)");
                ps.setInt(1, Integer.parseInt(txtProductID.getText()));
                ps.setString(2, txtProductName.getText());
                ps.setString(3, txtDesc.getText());
                ps.setDouble(4, Double.parseDouble(txtPrice.getText()));
                ps.setInt(5, Integer.parseInt(txtStock.getText()));
                try {
                    InputStream img = new FileInputStream(new File(ImgPath));
                    ps.setBlob(6, img);
                } catch (FileNotFoundException ex) {
                    System.out.println("file not found");
                }
                ps.setInt(7, Integer.parseInt(txtCategoryID.getText()));
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "data inserted!");
                
                //to refresh jtable
                DefaultTableModel model = (DefaultTableModel)tblProducts.getModel();
                model.setRowCount(0);
                ShowProductInJTable();

            } catch (ClassNotFoundException ex) {
                System.out.println("driver not found");
            } catch (SQLException ex) {
                System.out.println("syntax error" + ex.getMessage());
            }
            // only for test
            System.out.println("Name => "+txtProductName.getText());
            System.out.println("Price => "+txtPrice.getText());
            System.out.println("Image => "+ImgPath);
        }
    }//GEN-LAST:event_lblAddMouseClicked

    private void lblUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUpdateMouseClicked
        String UpdateQuery = null;
        if(checkInputs() ){
            try {
                //connecting java with database
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1/doki_electronics", "root", "");
                //update without image
                if(ImgPath == null){
                    UpdateQuery = "UPDATE Products SET ProductName = ?,Description = ?,UnitPrice = ?,Stock = ?,CategoryID =? WHERE ProductID = ?";
                    ps = con.prepareStatement(UpdateQuery);
                    ps.setString(1, txtProductName.getText());
                    ps.setString(2, txtDesc.getText());
                    ps.setDouble(3, Double.parseDouble(txtPrice.getText()));
                    ps.setInt(4, Integer.parseInt(txtStock.getText()));
                    ps.setInt(5, Integer.parseInt(txtCategoryID.getText()));
                    ps.setInt(6, Integer.parseInt(txtProductID.getText()));
                    ps.executeUpdate();
                } 
                //update with image
                else{
                    InputStream img = new FileInputStream(new File(ImgPath));
                    UpdateQuery = "UPDATE Products SET ProductName = ?,Description = ?,UnitPrice = ?,Stock = ?,Picture = ?, CategoryID =? WHERE ProductID = ?";
                    ps = con.prepareStatement(UpdateQuery);
                    ps.setString(1, txtProductName.getText());
                    ps.setString(2, txtDesc.getText());
                    ps.setDouble(3, Double.parseDouble(txtPrice.getText()));
                    ps.setInt(4, Integer.parseInt(txtStock.getText()));
                    ps.setBlob(5, img);
                    ps.setInt(6, Integer.parseInt(txtCategoryID.getText()));
                    ps.setInt(7, Integer.parseInt(txtProductID.getText()));
                    ps.executeUpdate();
                }
                 
            } catch (ClassNotFoundException ex) {
                System.out.println(ex.getMessage());
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            } catch (FileNotFoundException ex) {
                System.out.println(ex.getMessage());;
            } 
        } else{
            JOptionPane.showMessageDialog(null, "one or more fields is empty");
        }
        
        //to refresh jtable
        DefaultTableModel model = (DefaultTableModel)tblProducts.getModel();
        model.setRowCount(0);
        ShowProductInJTable();
    }//GEN-LAST:event_lblUpdateMouseClicked

    private void lblDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDeleteMouseClicked
        if (!txtProductID.getText().equals("")) {
            try {
                //connecting java with database
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://127.0.0.1/doki_electronics", "root", "");
                //delete rows
                ps = con.prepareStatement("DELETE FROM Products WHERE ProductID = ?");
                ps.setInt(1, Integer.parseInt(txtProductID.getText()));
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "products deleted");
            }   catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "products not deleted");
            } catch (ClassNotFoundException ex) {
                System.out.println("driver not found = " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "products not deleted, please fill the Product ID field");
        }
        //to refresh jtable
        DefaultTableModel model = (DefaultTableModel)tblProducts.getModel();
        model.setRowCount(0);
        ShowProductInJTable();
    }//GEN-LAST:event_lblDeleteMouseClicked

    private void lblBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBackMouseClicked
        MainMenu MM = new MainMenu();
        MM.setVisible(true);
        MM.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_lblBackMouseClicked
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblAdd;
    private javax.swing.JLabel lblAddImage;
    private javax.swing.JLabel lblBack;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblDelete;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblUpdate;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtCategoryID;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
}
